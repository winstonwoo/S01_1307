/*
 *  ======== main.c ========
 */

#include <xdc/std.h>

#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/BIOS.h>

#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/hal/Hwi.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Mailbox.h>

#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/rom.h"
#include "driverlib/timer.h"


extern Swi_Handle swi_UART0_handle ;
extern Swi_Handle swi_UART1_handle ;
extern Swi_Handle swi_UART2_handle ;
extern Swi_Handle swi_UART3_handle ;
extern Swi_Handle swi_I2C1_handle ;
extern Swi_Handle swi_SPI0_handle ;
extern Swi_Handle swi_SPI1_handle ;
extern Swi_Handle swi_SPI2_handle ;
extern Swi_Handle swi_CAN0_handle ;
extern Swi_Handle swi_CAN1_handle ;
extern Swi_Handle swi_GPIOBoot_handle ;

extern Mailbox_Handle Mb_uart0_handle ;


void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount) ;



Void hwi_UART0_fxn(UArg arg)
{
	  unsigned long ulStatus;
	  unsigned char ucMsg[20] ;
	  int i = 0 ;

	    //
	    // Get the interrrupt status.
	    //
	    ulStatus = ROM_UARTIntStatus(UART0_BASE, true);

	    //
	    // Clear the asserted interrupts.
	    //
	    ROM_UARTIntClear(UART0_BASE, ulStatus);

	    memset(ucMsg, 0x0, sizeof(ucMsg)) ;
	    //
	    // Loop while there are characters in the receive FIFO.
	    //
	    while(ROM_UARTCharsAvail(UART0_BASE))
	    {
	        //
	        // Read the next character from the UART and write it back to the UART.
	        //
	       // ROM_UARTCharPutNonBlocking(UART0_BASE,
	         //                          ROM_UARTCharGetNonBlocking(UART0_BASE));
	        ucMsg[i++] = ROM_UARTCharGetNonBlocking(UART0_BASE) ;
	        if (i>=20) 	break ;  //If the amount of characters is big than 20;

	    }

	    Mailbox_post(Mb_uart0_handle, ucMsg, BIOS_NO_WAIT) ;

	    Swi_post(swi_UART0_handle) ;

}



Void hwi_UART1_fxn(UArg arg)
{
	Swi_post(swi_UART1_handle) ;
}


Void hwi_UART2_fxn(UArg arg)
{
	Swi_post(swi_UART2_handle) ;
}


Void hwi_UART3_fxn(UArg arg)
{
	Swi_post(swi_UART3_handle) ;
}


Void hwi_I2C1_fxn(UArg arg)
{
	Swi_post(swi_I2C1_handle) ;
}

Void hwi_SPI0_fxn(UArg arg)
{
	Swi_post(swi_SPI0_handle) ;
}


Void hwi_SPI1_fxn(UArg arg)
{
	Swi_post(swi_SPI1_handle) ;
}


Void hwi_SPI2_fxn(UArg arg)
{
	Swi_post(swi_SPI2_handle) ;
}


Void hwi_CAN0_fxn(UArg arg)
{
	Swi_post(swi_CAN0_handle) ;
}


Void hwi_CAN1_fxn(UArg arg)
{
	Swi_post(swi_CAN1_handle) ;
}


Void hwi_GPIOBoot_fxn(UArg arg)
{
	long lIntSts ;

	//store the interrupt flag into lIntSts
	lIntSts = ROM_GPIOPinIntStatus(GPIO_PORTM_BASE, false) ;

	//
	// Clear the GPIO interrupt.
	//
	ROM_GPIOPinIntClear(GPIO_PORTM_BASE, GPIO_PIN_4);



	Swi_post(swi_GPIOBoot_handle) ;
}


//*****************************************************************************
//
// This is the handler for this SysTick interrupt.  FatFs requires a timer tick
// every 10 ms for internal timing purposes.
//
//*****************************************************************************
void
hwi_TIMER2_fxn(void)
{
    //
    // Clear the timer interrupt.
    //
    ROM_TimerIntClear(TIMER2_BASE, TIMER_TIMA_TIMEOUT);


	// ROM_IntMasterDisable();
	//
	// Call the FatFs tick timer.
	//
       disk_timerproc();

     // ROM_IntMasterEnable();

}


//SWI section
Void swi_UART0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART2_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART3_fxn(UArg arg0, UArg arg1)
{


}

Void swi_I2C1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI2_fxn(UArg arg0, UArg arg1)
{


}

Void swi_CAN0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_CAN1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_GPIOBoot_fxn(UArg arg0, UArg arg1)
{


}

//Task section
Void tsk_manage_fxn(UArg arg0, UArg arg1)
{
	unsigned char ucMsg[20] ;
	for(;;)
	{
		// UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		Mailbox_pend(Mb_uart0_handle, ucMsg, BIOS_WAIT_FOREVER) ;
		UARTprintf("uart output!!!\n") ;
		Task_sleep(1) ;
	}

}

Void tsk_bootloader_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_bootloader_fxn \n") ;
		Task_sleep(2) ;
	}

}

Void tsk_diagnosis_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_diagnosis_fxn \n") ;
		Task_sleep(3) ;
	}

}

Void tsk_GPRS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		UARTprintf("UARTprintf tsk_GPRS_fxn \n") ;
	    System_printf("tsk_GPRS_fxn \n") ;
		Task_sleep(3000) ;
	}

}

Void tsk_GPS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_GPS_fxn \n") ;
		Task_sleep(3) ;
	}

}


Void tsk_battery_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_battery_fxn \n") ;
		Task_sleep(3) ;
	}

}

Void tsk_FS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_FS_fxn \n") ;
	//	sdcard_main() ;
		Task_sleep(3) ;
	}

}

Void tsk_CAN3_fxn(UArg arg0, UArg arg1)
{

	for(;;)
	{
		 //UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		Task_sleep(3) ;
	}
}

Void tsk_CAN4_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		// UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		Task_sleep(3) ;
	}

}

Void tsk_CAN2_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		//UARTprintf("tsk_CAN2_fxn \n") ;
		Task_sleep(3) ;
	}

}

Void tsk_CAN1_fxn(UArg arg0, UArg arg1)
{

	for(;;)
	{
		System_printf("tsk_CAN1_fxn \n") ;
		Task_sleep(3) ;
	}

}


/*
 *  ======== taskFxn ========
 */
Void taskFxn(UArg a0, UArg a1)
{
  //  UARTprintf("enter taskFxn()\n");

    Task_sleep(10);

  //  UARTprintf("exit taskFxn()\n");
}

/**/
Void init_gpio()
{
	  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOM);

	  ROM_GPIOPinTypeGPIOInput(GPIO_PORTM_BASE, GPIO_PIN_4) ;
	  ROM_GPIOPadConfigSet(GPIO_PORTM_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU) ;
	  ROM_GPIOIntTypeSet(GPIO_PORTM_BASE, GPIO_PIN_4, GPIO_FALLING_EDGE) ;

}

/**/
Void init_uart()
{
	  //UART0 initialization with 115200, 8, N, 1
	  //
	  // Enable the peripherals used by this example.
	  //
	  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);


	//
	// Set GPIO A0 and A1 as UART pins.
	//
	ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

#if 0
	//
	// Configure the UART for 115,200, 8-N-1 operation.
	//
	ROM_UARTConfigSetExpClk(UART0_BASE, ROM_SysCtlClockGet(), 115200,
							(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
							 UART_CONFIG_PAR_NONE));

#else
    //
    // Initialize the UART as a console for text I/O.
    //
    UARTStdioInit(0);
#endif



}

Void cfg_interrupt()
{


		// Enable processor interrupts.
		//
		ROM_IntMasterEnable();

		//Enable GPIOM4 for boot trigger
		ROM_GPIOPinIntEnable(GPIO_PORTM_BASE, GPIO_PIN_4) ;

		//
		// Enable the UART0 interrupt.
		//
		ROM_IntEnable(INT_UART0);
		ROM_UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);

		//
		// Setup the interrupts for the timer timeouts.
		//
		ROM_IntEnable(INT_TIMER2A);
		ROM_TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);
}

Void init_sdcard()
{

     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);
     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
     //
     // Configure the two 32-bit periodic timers.
     //
     ROM_TimerConfigure(TIMER2_BASE, TIMER_CFG_PERIODIC);
     ROM_TimerLoadSet(TIMER2_BASE, TIMER_A, ROM_SysCtlClockGet()/100);

     //
     // Enable the timers.
     //
     ROM_TimerEnable(TIMER2_BASE, TIMER_A);


}

Void init_sys()
{
	//GPIOM initialization for bootloader
	init_gpio() ;

	//UART0 initialization
	init_uart() ;


	//UART1 initialization

	init_sdcard() ;



    //interrupt setting for system
	cfg_interrupt() ;

}


//*****************************************************************************
//
// Send a string to the UART.
//
//*****************************************************************************
void
UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
    {
        //
        // Write the next character to the UART.
        //
        ROM_UARTCharPutNonBlocking(UART0_BASE, *pucBuffer++);
    }
}

/*
 *  ======== main ========
 */
Void main()
{ 
    Task_Handle task;
    Error_Block eb;

    System_printf("enter main()\n");

    Error_init(&eb);

    //System driver initialization
    init_sys() ;

    //
    // Prompt for text to be entered.
    //
    UARTSend((unsigned char *)"Enter text: ", 12);

    task = Task_create(taskFxn, NULL, &eb);
    if (task == NULL) {
        System_printf("Task_create() failed!\n");
        BIOS_exit(0);
    }

    BIOS_start();     /* enable interrupts and start SYS/BIOS */
}
