var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi_uart0_handle";
hwi0Params.arg = null;
Program.global.hwi_uart0_handle = Hwi.create(21, "&hwi_uart0_fxn", hwi0Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi_UARTbootloader_handle";
Program.global.swi_UARTbootloader_handle = Swi.create("&swi_UARTbootloader_fxn", swi0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "tsk_GPRS_handle";
Program.global.tsk_GPRS_handle = Task.create("&tsk_GPRS_fxn", task0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi_uart1_handle";
Program.global.hwi_uart1_handle = Hwi.create(22, "&hwi_uart1_fxn", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi_uart2_handle";
Program.global.hwi_uart2_handle = Hwi.create(49, "&hwi_uart2_fxn", hwi2Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "hwi_uart3_handle";
Program.global.hwi_uart3_handle = Hwi.create(75, "&hwi_uart3_fxn", hwi3Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "swi_I2C1_handle";
Program.global.swi_I2C1_handle = Hwi.create(53, "&swi_I2C1_fxn", hwi4Params);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "hwi_SPI0_handle";
Program.global.hwi_SPI0_handle = Hwi.create(null, "&hwi_SPI0_fxn", hwi5Params);
