//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#include <xdc/std.h>

#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/BIOS.h>

#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/hal/Hwi.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Mailbox.h>

#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_can.h"
#include "inc/hw_ints.h"
#include "driverlib/can.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "utils/uartstdio.h"

//*****************************************************************************

//#define D_CAN_RECEIVE
//#define D_CAN_SEND
//#define D_LOW_CAN

volatile unsigned long g_bRXFlag1 = 0;
volatile unsigned long g_bRXFlag2 = 0;
volatile unsigned long g_bRXFlag3 = 0;


void init_high_can( void )
{


     //For JTA1043T configuration on CAN1 port
     SysCtlPeripheralEnable( SYSCTL_PERIPH_GPIOA ) ;
     
     GPIOPinConfigure( GPIO_PA0_CAN1RX ) ;
     GPIOPinConfigure( GPIO_PA1_CAN1TX ) ;

     GPIOPinTypeCAN( GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1) ;

     //PA2 work as CAN_ERR_N
     GPIOPinTypeGPIOInput( GPIO_PORTA_BASE, GPIO_PIN_2) ;

     //PA3 work as CAN_EN
     GPIOPinTypeGPIOOutput( GPIO_PORTA_BASE, GPIO_PIN_3) ;
     GPIOPinTypeGPIOOutput( GPIO_PORTA_BASE, GPIO_PIN_4) ;

     //Enable TJA1043T U3004 part
     GPIOPinWrite( GPIO_PORTA_BASE, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_3 | GPIO_PIN_4) ;

     //Enable CAN0 port
     SysCtlPeripheralEnable( SYSCTL_PERIPH_CAN1 ) ;
     CANInit( CAN1_BASE ) ;
     CANBitRateSet( CAN1_BASE, SysCtlClockGet(), 250000) ;

     //HWREG(CAN1_BASE + CAN_O_CTL) |= CAN_CTL_TEST ;
     //HWREG(CAN1_BASE + CAN_O_TST) |= CAN_TST_LBACK ;

     CANIntEnable( CAN1_BASE, CAN_INT_MASTER | CAN_INT_ERROR | CAN_INT_STATUS) ;
     IntEnable( INT_CAN1 ) ;
     CANEnable( CAN1_BASE ) ;

}



void tsk_can( void )
{
     tCANMsgObject sCANMsgObject1 ;
     tCANMsgObject sCANMsgObject2 ;
     tCANMsgObject sCANMsgObject3 ;
     tCANMsgObject sCANMsgObject4 ;
     int i ;

     unsigned char ucCANData1[8] = {1, 2, 3, 4, 5, 6, 7, 8} ;
     unsigned char ucCANData2[5] = { 2, 2, 2, 2, 2 };
     unsigned char ucCANData3[6] = { 3, 3, 3, 3, 3, 3 };
     unsigned char ucCANData4[8] = { 4, 4, 4, 4, 5, 5, 5, 5 };

         
     sCANMsgObject1.ui32MsgID = 0x1001 ;
     sCANMsgObject1.ui32MsgIDMask = 0 ;
     sCANMsgObject1.ui32Flags = MSG_OBJ_TX_INT_ENABLE ;
     sCANMsgObject1.ui32MsgLen = sizeof( ucCANData1 ) ;
     sCANMsgObject1.pui8MsgData = ucCANData1 ;

      
     sCANMsgObject2.ui32MsgID = 0x2001 ;
     sCANMsgObject2.ui32MsgIDMask = 0 ;
     sCANMsgObject2.ui32Flags = MSG_OBJ_TX_INT_ENABLE ;
     sCANMsgObject2.ui32MsgLen = sizeof( ucCANData2 ) ;
     sCANMsgObject2.pui8MsgData = ucCANData2 ;


     sCANMsgObject3.ui32MsgID = 0x3001 ;
     sCANMsgObject3.ui32MsgIDMask = 0 ;
     sCANMsgObject3.ui32Flags = MSG_OBJ_TX_INT_ENABLE ;
     sCANMsgObject3.ui32MsgLen = sizeof( ucCANData3 ) ;
     sCANMsgObject3.pui8MsgData = ucCANData3 ;

     sCANMsgObject4.ui32MsgID = 0x1001 ;
     sCANMsgObject4.ui32MsgIDMask = 0x00000 ;
     sCANMsgObject4.ui32Flags = MSG_OBJ_RX_INT_ENABLE ;//| MSG_OBJ_USE_ID_FILTER | MSG_OBJ_EXTENDED_ID; ;
     sCANMsgObject4.ui32MsgLen = sizeof( ucCANData4 ) ;


     for( ;; )
     {
#ifdef D_CAN_SEND

#ifdef D_HIGH_CAN
          CANMessageSet( CAN1_BASE, 1, &sCANMsgObject1, MSG_OBJ_TYPE_TX ) ;
          SysCtlDelay(SysCtlClockGet()/3) ;
          CANMessageSet( CAN1_BASE, 2, &sCANMsgObject2, MSG_OBJ_TYPE_TX ) ;
          SysCtlDelay(SysCtlClockGet()/3) ;
          CANMessageSet( CAN1_BASE, 3, &sCANMsgObject3, MSG_OBJ_TYPE_TX ) ;
          SysCtlDelay(SysCtlClockGet()/3) ;
        //
        // Change the value in the message data for each of the messages.
        //
        (*(unsigned long *)ucCANData1)++;
        (*(unsigned long *)ucCANData2)++;
        (*(unsigned long *)ucCANData3)++;


#endif

#ifdef D_LOW_CAN
        CANMessageSet( CAN0_BASE, 1, &sCANMsgObject1, MSG_OBJ_TYPE_TX ) ;
        SysCtlDelay(SysCtlClockGet()/3) ;
        CANMessageSet( CAN0_BASE, 2, &sCANMsgObject2, MSG_OBJ_TYPE_TX ) ;
        SysCtlDelay(SysCtlClockGet()/3) ;
        CANMessageSet( CAN0_BASE, 3, &sCANMsgObject3, MSG_OBJ_TYPE_TX ) ;
        SysCtlDelay(SysCtlClockGet()/3) ;

		//
		// Change the value in the message data for each of the messages.
		//
		(*(unsigned long *)ucCANData1)++;
		(*(unsigned long *)ucCANData2)++;
		(*(unsigned long *)ucCANData3)++;

#endif

#endif


#ifdef D_CAN_RECEIVE
		CANMessageSet(CAN0_BASE, 1, &sCANMsgObject4, MSG_OBJ_TYPE_RX);

		sCANMsgObject4.ui32MsgID = 0x2001;
		CANMessageSet(CAN0_BASE, 2, &sCANMsgObject4, MSG_OBJ_TYPE_RX);

		sCANMsgObject4.ui32MsgID = 0x3001;               // CAN msg ID
		CANMessageSet(CAN0_BASE, 3, &sCANMsgObject4, MSG_OBJ_TYPE_RX);

		for(;;)
		{
			 if(g_bRXFlag1)
			{
				//
				// Reuse the same message object that was used earlier to configure
				// the CAN for receiving messages.  A buffer for storing the
				// received data must also be provided, so set the buffer pointer
				// within the message object.  This same buffer is used for all
				// messages in this example, but your application could set a
				// different buffer each time a message is read in order to store
				// different messages in different buffers.
				//

				sCANMsgObject4.pui8MsgData = ucCANData4 ;

				//
				// Read the message from the CAN.  Message object number 1 is used
				// (which is not the same thing as CAN ID).  The interrupt clearing
				// flag is not set because this interrupt was already cleared in
				// the interrupt handler.
				//
				CANMessageGet(CAN0_BASE, 1, &sCANMsgObject4, 0);
                UARTprintf("CAN0 OBJECT1 RECEIVED!\\n") ;
				for(i=0; i<sizeof(ucCANData1); i++)
					UARTprintf("%u \n", ucCANData4[i]) ;

				//
				// Clear the pending message flag so that the interrupt handler can
				// set it again when the next message arrives.
				//
				g_bRXFlag1 = 0;

			}

		 if(g_bRXFlag2)
			{
			 sCANMsgObject4.pui8MsgData = ucCANData4 ;
				CANMessageGet(CAN0_BASE, 2, &sCANMsgObject4, 0);
				UARTprintf("CAN0 OBJECT2 RECEIVED!\\n") ;
				for(i=0; i<sizeof(ucCANData2); i++)
									UARTprintf("%u \n", ucCANData4[i]) ;
				g_bRXFlag2 = 0;

			}


		 if(g_bRXFlag3)
		   {
			 sCANMsgObject4.pui8MsgData = ucCANData4 ;
			   CANMessageGet(CAN0_BASE, 3, &sCANMsgObject4, 0);
			   UARTprintf("CAN0 OBJECT3 RECEIVED!\\n") ;
			   for(i=0; i<sizeof(ucCANData3); i++)
			   					UARTprintf("%u \n", ucCANData4[i]) ;
			   g_bRXFlag3 = 0;

		   }


		Task_sleep(1000) ;


		}

#endif


		Task_sleep( 1000 ) ;
     }

}

