/*
 *  ======== main.c ========
 */

#include <xdc/std.h>

#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/BIOS.h>

#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/hal/Hwi.h>
#include <ti/sysbios/knl/Swi.h>
#include <ti/sysbios/knl/Mailbox.h>

#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/rom.h"
#include "driverlib/timer.h"


extern Swi_Handle swi_UART0_handle ;
extern Swi_Handle swi_UART1_handle ;
extern Swi_Handle swi_UART2_handle ;
extern Swi_Handle swi_UART3_handle ;
extern Swi_Handle swi_I2C1_handle ;
extern Swi_Handle swi_SPI0_handle ;
extern Swi_Handle swi_SPI1_handle ;
extern Swi_Handle swi_SPI2_handle ;
extern Swi_Handle swi_CAN0_handle ;
extern Swi_Handle swi_CAN1_handle ;
extern Swi_Handle swi_GPIOBoot_handle ;

extern Mailbox_Handle Mb_uart2_handle ;


void UARTSend(const unsigned char *pucBuffer, unsigned long ulCount) ;



Void hwi_UART0_fxn(UArg arg)
{
     Swi_post(swi_UART0_handle) ;

}



Void hwi_UART1_fxn(UArg arg)
{
     Swi_post(swi_UART1_handle) ;
}


Void hwi_UART2_fxn(UArg arg)
{
     unsigned long ulStatus;
     unsigned char ucMsg[8] ;
     int i = 0 ;

     //
     // Get the interrrupt status.
     //
     ulStatus = ROM_UARTIntStatus(UART2_BASE, true);

     //
     // Clear the asserted interrupts.
     //
     ROM_UARTIntClear(UART2_BASE, ulStatus);

     memset(ucMsg, 0x0, sizeof(ucMsg)) ;
     //
     // Loop while there are characters in the receive FIFO.
     //
     while(ROM_UARTCharsAvail(UART2_BASE))
     {
          //
          // Read the next character from the UART and write it back to the UART.
          //
          // ROM_UARTCharPutNonBlocking(UART0_BASE,
          //                          ROM_UARTCharGetNonBlocking(UART0_BASE));
          ucMsg[i++] = ROM_UARTCharGetNonBlocking(UART2_BASE) ;
          if (i>=8) 	break ;  //If the amount of characters is big than 20;

     }

     Mailbox_post(Mb_uart2_handle, ucMsg, BIOS_NO_WAIT) ;


     Swi_post(swi_UART2_handle) ;
}


Void hwi_UART3_fxn(UArg arg)
{
     Swi_post(swi_UART3_handle) ;
}


Void hwi_I2C1_fxn(UArg arg)
{
	Swi_post(swi_I2C1_handle) ;
}

Void hwi_SPI0_fxn(UArg arg)
{
	Swi_post(swi_SPI0_handle) ;
}


Void hwi_SPI1_fxn(UArg arg)
{
	Swi_post(swi_SPI1_handle) ;
}


Void hwi_SPI2_fxn(UArg arg)
{
	Swi_post(swi_SPI2_handle) ;
}


Void hwi_CAN0_fxn(UArg arg)
{
	Swi_post(swi_CAN0_handle) ;
}


Void hwi_CAN1_fxn(UArg arg)
{
	Swi_post(swi_CAN1_handle) ;
}


Void hwi_GPIOBoot_fxn(UArg arg)
{
	long lIntSts ;

	//store the interrupt flag into lIntSts
	lIntSts = ROM_GPIOPinIntStatus(GPIO_PORTM_BASE, false) ;

	//
	// Clear the GPIO interrupt.
	//
	ROM_GPIOPinIntClear(GPIO_PORTM_BASE, GPIO_PIN_4);



	Swi_post(swi_GPIOBoot_handle) ;
}


//*****************************************************************************
//
// This is the handler for this SysTick interrupt.  FatFs requires a timer tick
// every 10 ms for internal timing purposes.
//
//*****************************************************************************
void
hwi_TIMER2_fxn(void)
{
    //
    // Clear the timer interrupt.
    //
	ROM_TimerIntClear(TIMER2_BASE, TIMER_TIMA_TIMEOUT);


	// ROM_IntMasterDisable();
	//
	// Call the FatFs tick timer.
	//
    //disk_timerproc();

     // ROM_IntMasterEnable();

}


//SWI section
Void swi_UART0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART2_fxn(UArg arg0, UArg arg1)
{


}

Void swi_UART3_fxn(UArg arg0, UArg arg1)
{


}

Void swi_I2C1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_SPI2_fxn(UArg arg0, UArg arg1)
{


}

Void swi_CAN0_fxn(UArg arg0, UArg arg1)
{


}

Void swi_CAN1_fxn(UArg arg0, UArg arg1)
{


}

Void swi_GPIOBoot_fxn(UArg arg0, UArg arg1)
{


}

//Task section
Void tsk_manage_fxn(UArg arg0, UArg arg1)
{
	unsigned char ucMsg[20] ;
	for(;;)
	{
		// UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		//Mailbox_pend(Mb_uart2_handle, ucMsg, BIOS_WAIT_FOREVER) ;
		//UARTprintf("uart output!!!\n") ;
		Task_sleep(1000) ;
	}

}

Void tsk_bootloader_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_bootloader_fxn \n") ;
		Task_sleep(2000) ;
	}

}

Void tsk_diagnosis_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_diagnosis_fxn \n") ;
		Task_sleep(3000) ;
	}

}

Void tsk_GPRS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		//UARTprintf("UARTprintf tsk_GPRS_fxn \n") ;
	    System_printf("tsk_GPRS_fxn \n") ;
		Task_sleep(3000) ;
	}

}

Void tsk_GPS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_GPS_fxn \n") ;
		Task_sleep(3000) ;
	}

}


Void tsk_battery_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_battery_fxn \n") ;
		Task_sleep(3000) ;
	}

}

Void tsk_FS_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		System_printf("tsk_FS_fxn \n") ;
		sdcard_main() ;
		Task_sleep(3000) ;
	}

}

Void tsk_CAN3_fxn(UArg arg0, UArg arg1)
{

	for(;;)
	{
		 //UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		Task_sleep(3000) ;
	}
}

Void tsk_CAN4_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		// UARTSend((unsigned char *)"tsk_manage_fxn \n ", 20);
		Task_sleep(3000) ;
	}

}

Void tsk_CAN2_fxn(UArg arg0, UArg arg1)
{
	for(;;)
	{
		//UARTprintf("tsk_CAN2_fxn \n") ;
		Task_sleep(3000) ;
	}

}

Void tsk_CAN1_fxn(UArg arg0, UArg arg1)
{

	for(;;)
	{
		System_printf("tsk_CAN1_fxn \n") ;
		Task_sleep(3000) ;
	}

}


/*
 *  ======== taskFxn ========
 */
Void taskFxn(UArg a0, UArg a1)
{
  //  UARTprintf("enter taskFxn()\n");

    Task_sleep(1000);

  //  UARTprintf("exit taskFxn()\n");
}

/**/
Void init_gpio()
{
#if 0  //There isn't the bootloader tringer at eastsoft board
	  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOM);

	  ROM_GPIOPinTypeGPIOInput(GPIO_PORTM_BASE, GPIO_PIN_4) ;
	  ROM_GPIOPadConfigSet(GPIO_PORTM_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU) ;
	  ROM_GPIOIntTypeSet(GPIO_PORTM_BASE, GPIO_PIN_4, GPIO_FALLING_EDGE) ;
#endif

	  //Add 5V5_EN function to enable 5V5_OUT for CAN trancever with H4 pin
	  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH) ;
	  ROM_GPIOPinTypeGPIOOutput(GPIO_PORTH_BASE, GPIO_PIN_2) ;
	  ROM_GPIOPinWrite(GPIO_PORTH_BASE, GPIO_PIN_2, GPIO_PIN_2) ;

}

/**/
Void init_uart()
{
#if 1
    	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    	//UART2 initialization with 115200, 8, N, 1
        //
        // Enable the peripherals used by this example.
        //
//
		// Change PD7 into hardware (NMI) pins.  First open the
		// lock and select the bits we want to modify in the GPIO commit
		// register.
		//
		HWREG(GPIO_PORTD_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY_DD;
		HWREG(GPIO_PORTD_BASE + GPIO_O_CR) = 0x0F;

		//
		// Now modify the configuration of the pins that we unlocked.
		//
		HWREG(GPIO_PORTD_BASE + GPIO_O_AFSEL) |= 0xC0;
        //
        // Set GPIO D6 and D7 as UART2 pins.
        GPIOPinConfigure( GPIO_PD6_U2RX ) ;
        GPIOPinConfigure( GPIO_PD7_U2TX ) ;
        GPIOPinTypeUART(GPIO_PORTD_BASE, GPIO_PIN_6 | GPIO_PIN_7);

        ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART2);

        //

        /*
        ROM_UARTConfigSetExpClk(UART2_BASE, ROM_SysCtlClockGet(), 115200,
                                (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                                 UART_CONFIG_PAR_NONE));
                                 */

        UARTStdio(2) ;

		// Finally, clear the commit register and the lock to prevent
		// the pin configuration from being changed accidentally later.
		// Note that the lock is closed whenever we write to the GPIO_O_CR
		// register so we need to reopen it here.
		//
		HWREG(GPIO_PORTD_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY_DD;
		HWREG(GPIO_PORTD_BASE + GPIO_O_CR) = 0x00;
		HWREG(GPIO_PORTD_BASE + GPIO_O_LOCK) = 0;

        //
        // Enable the UART interrupt.
        //
        ROM_IntEnable(INT_UART2);
        ROM_UARTIntEnable(UART2_BASE, UART_INT_RX | UART_INT_RT);
#if 0
     //UART2 initialization with 115200, 8, N, 1
     //
     // Enable the peripherals used by this example.
     //
     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART2);

     //
     // Set GPIO D6 and D7 as UART2 pins.
     //
//     GPIOPadConfigSet(GPIO_PORTD_BASE,GPIO_PIN_6 | GPIO_PIN_7 , GPIO_STRENGTH_8MA,GPIO_PIN_TYPE_STD);
//     GPIODirModeSet(GPIO_PORTD_BASE, GPIO_PIN_6 | GPIO_PIN_7,  GPIO_DIR_MODE_HW);
     GPIOPinConfigure( GPIO_PD6_U2RX ) ;
     GPIOPinConfigure( GPIO_PD7_U2TX ) ;
     HWREG( 0x40007000 + 0x420) |= 0xc0 ;
     HWREG( 0x40007000 + 0x51c) |= 0xc0 ;
     GPIOPinTypeUART(GPIO_PORTD_BASE, GPIO_PIN_6 | GPIO_PIN_7);


     //
     // Initialize the UART as a console for text I/O.
     //
     UARTStdioInit(2);


     //
     // Enable the UART2 interrupt.
     //
     ROM_IntEnable(INT_UART2);
     ROM_UARTIntEnable(UART2_BASE, UART_INT_RX | UART_INT_RT);
#endif
#else

     //UART2 initialization with 115200, 8, N, 1
         //
         // Enable the peripherals used by this example.
         //
         ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
         ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART3);

         //
         // Set GPIO D6 and D7 as UART2 pins.
         GPIOPinConfigure( GPIO_PC6_U3RX ) ;
         GPIOPinConfigure( GPIO_PC7_U3TX ) ;
         GPIOPinTypeUART(GPIO_PORTC_BASE, GPIO_PIN_6 | GPIO_PIN_7);

         //
         ROM_UARTConfigSetExpClk(UART3_BASE, ROM_SysCtlClockGet(), 115200,
                                 (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                                  UART_CONFIG_PAR_NONE));

         //
         // Enable the UART interrupt.
         //
         ROM_IntEnable(INT_UART3);
         ROM_UARTIntEnable(UART3_BASE, UART_INT_RX | UART_INT_RT);


#endif

}

Void cfg_interrupt()
{


     // Enable processor interrupts.
     //
     ROM_IntMasterEnable();

#if 0           //Delete this GPIO trigger function
		//Enable GPIOM4 for boot trigger
     ROM_GPIOPinIntEnable(GPIO_PORTM_BASE, GPIO_PIN_4) ;
#endif

}

Void init_sdcard()
{
#if 0
     //Adopt PH4,5,6,7 for SSI2 as SDCARD signals

     ROM_SysCtlPeripheralEnable( SYSCTL_PERIPH_GPIOH ) ;
     ROM_GPIOPinTypeSSI( GPIO_PORTH_BASE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7  ) ;

     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI2);
#endif     

     ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
     //
     // Configure the two 32-bit periodic timers.
     //
     ROM_TimerConfigure(TIMER2_BASE, TIMER_CFG_PERIODIC);
     ROM_TimerLoadSet(TIMER2_BASE, TIMER_A, ROM_SysCtlClockGet()/100);


     //
     // Setup the interrupts for the timer timeouts.
     //
     ROM_IntEnable(INT_TIMER2A);
     ROM_TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);

     //
     // Enable the timers.
     //
     ROM_TimerEnable(TIMER2_BASE, TIMER_A);
	
}

Void init_sys()
{
	//GPIOM initialization for bootloader
	init_gpio() ;

	//UART0 initialization
	init_uart() ;


	//UART1 initialization

	init_sdcard() ;



    //interrupt setting for system
	cfg_interrupt() ;

}


//*****************************************************************************
//
// Send a string to the UART.
//
//*****************************************************************************
void
UARTSend(const unsigned char *pucBuffer, unsigned long ulCount)
{
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
    {
        //
        // Write the next character to the UART.
        //
        ROM_UARTCharPutNonBlocking(UART2_BASE, *pucBuffer++);
    }
}

/*
 *  ======== main ========
 */
Void main()
{ 
    Task_Handle task;
    Error_Block eb;

    System_printf("enter main()\n");

    Error_init(&eb);
    init_uart() ;
    for( ;; )
	{
			  UARTSend((unsigned char *)"Enter text: ", 12);
	}


    //System driver initialization
    init_sys() ;

    //
    // Prompt for text to be entered.
    //
    //UARTSend((unsigned char *)"Enter text: ", 12);
    for( ;; )
{
    	  UARTSend((unsigned char *)"Enter text: ", 12);
}

    task = Task_create(taskFxn, NULL, &eb);
    if (task == NULL) {
        System_printf("Task_create() failed!\n");
        BIOS_exit(0);
    }

    BIOS_start();     /* enable interrupts and start SYS/BIOS */
}
