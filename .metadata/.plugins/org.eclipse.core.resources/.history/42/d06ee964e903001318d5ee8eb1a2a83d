//*****************************************************************************
//This Program realize the main code of CAN driver
//
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#include "inc/hw_memmap.h"
#include "inc/hw_ssi.h"
#include "inc/hw_types.h"
#include "driverlib/ssi.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "utils/uartstdio.h"
#include "inc/hw_gpio.h"
#include "MCP2515.h"

//*****************************************************************************
//
//*****************************************************************************

//*****************************************************************************
//
// Number of bytes to send and receive.
//
//*****************************************************************************
#define NUM_RX 14

#define INT_GPIOB 0x02



#define GPIO_PA2_SSI0CLK 0x00000402

#define GPIO_PA5_SSI0TX 0x00001002

#define GPIO_PA4_SSI0RX 0x00000C02

#define GPIO_PA3_SSI0FSS 0x00000802

#define TX0   0x01
#define TX1   0x02
#define TX3   0x04
#define TXALL 0x07

#define GPIOIM 0x410
#define NVIC_BASE 0xE000E000
#define EN0 0x100




//*****************************************************************************
//
//This function send the Data through SPI, x[] is the array that contains the
//data to send, and the y determines how may bytes(frames) to send. One thing
//should be keep in mind to use this function is that the SPI is full-duplex
//RX buffer receives data when sending data, so in read register functions using
//this function, cares should be take to avoid reading unwanted junks.

//*****************************************************************************
void SPI_Send(unsigned long x[], int y);

//*****************************************************************************
//
//This function send the Data through SPI, x[] is the array that contains the
//data to send, and the y determines how may bytes(frames) to send. One thing
//should be keep in mind to use this function is that the SPI is full-duplex
//RX buffer receives data when sending data, so in read register functions using
//this function, cares should be take to avoid reading unwanted junks.

//*****************************************************************************
unsigned long SPI_Receive(int);

//*****************************************************************************
//Reset CAN Controller through command

//*****************************************************************************
void CAN_Reset(void);

//*****************************************************************************
//Read a CAN controller register, the parameter is the address of the register
//to read, returns the content of the register

//*****************************************************************************
unsigned long Reg_Read(unsigned long);

//*****************************************************************************
//Write a CAN controller register, the parameter is the address of the register
//to write and the content to write

//*****************************************************************************

void Reg_Write(unsigned long, unsigned long);

//*****************************************************************************
//CAN Controller Init, Just configure one RX Buffer, the baud rate is set to 125K
// In order to debug, the mask of the RX buffer is set to 0x00, which accept all the
//packet despite of the ID.

//*****************************************************************************

void CAN_Init(void);

//*****************************************************************************
//Bit modify of a register

//*****************************************************************************

void Reg_BitModify(unsigned long address,unsigned long mask, unsigned long data);

void Transmit_Data(unsigned long number);

//*****************************************************************************

//*****************************************************************************

void CAN_Interrupt(void);

void Read_RX(int number, unsigned long RX[]);

//*****************************************************************************
//
// This function sets up UART0 to be used for a console to display information
// as the example is running.
//
//*****************************************************************************

//*****************************************************************************
//
// Configure SSI0 in master Freescale (SPI) mode.  This example will send out
// 3 bytes of data, then wait for 3 bytes of data to come in.  This will all be
// done using the polling method.
//
//*****************************************************************************
unsigned long DataRx_BUFFER[NUM_RX]={0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uint32_t ulDataRx = 0;
int
sub_spi_main(void)
{
    //unsigned long ulDataTx[NUM_SSI_DATA]={0,0,0};
    //unsigned long ulDataRx = 0;
#if 0
    //
    // Set the clocking to run directly from the external crystal/oscillator.
    // TODO: The SYSCTL_XTAL_ value must be changed to match the value of the
    // crystal on your board.
    //
    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN |
                   SYSCTL_XTAL_16MHZ);

    //
    // Set up the serial console to use for displaying messages.  This is
    // just for this example program and is not needed for SSI operation.
    //

    //
    // Display the setup on the console.

    //
    // The SSI0 peripheral must be enabled for use.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);

    //
    // For this example SSI0 is used with PortA[5:2].  The actual port and pins
    // used may be different on your part, consult the data sheet for more
    // information.  GPIO port A needs to be enabled so these pins can be used.
    // TODO: change this to whichever GPIO port you are using.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    //
    // Configure the pin muxing for SSI0 functions on port A2, A3, A4, and A5.
    // This step is not necessary if your part does not support pin muxing.
    // TODO: change this to select the port/pin you are using.
    //
    GPIOPinConfigure(GPIO_PA2_SSI0CLK);
    GPIOPinConfigure(GPIO_PA3_SSI0FSS);
    GPIOPinConfigure(GPIO_PA4_SSI0RX);
    GPIOPinConfigure(GPIO_PA5_SSI0TX);

    //
    // Configure the GPIO settings for the SSI pins.  This function also gives
    // control of these pins to the SSI hardware.  Consult the data sheet to
    // see which functions are allocated per pin.
    // The pins are assigned as follows:
    //      PA5 - SSI0Tx
    //      PA4 - SSI0Rx
    //      PA3 - SSI0Fss
    //      PA2 - SSI0CLK
    // TODO: change this to select the port/pin you are using.
    //
    GPIOPinTypeSSI(GPIO_PORTA_BASE, GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 |
                   GPIO_PIN_2);

    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,GPIO_PIN_7);
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE,GPIO_PIN_6);
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, 0x00);
    //
    // Configure and enable the SSI port for SPI master mode.  Use SSI0,
    // system clock supply, idle clock level low and active low clock in
    // freescale SPI mode, master mode, 1MHz SSI frequency, and 8-bit data.
    // For SPI mode, you can set the polarity of the SSI clock when the SSI
    // unit is idle.  You can also configure what clock edge you want to
    // capture data on.  Please reference the datasheet for more information on
    // the different SPI modes.
    //
    SSIConfigSetExpClk(SSI0_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_0,
                       SSI_MODE_MASTER, 1000000, 8);

    //
    // Enable the SSI0 module.
    //
    SSIEnable(SSI0_BASE);

    //
    // Read any residual data from the SSI port.  This makes sure the receive
    // FIFOs are empty, so we don't read any unwanted junk.  This is done here
    // because the SPI SSI mode is full-duplex, which allows you to send and
    // receive at the same time.  The SSIDataGetNonBlocking function returns
    // "true" when data was returned, and "false" when no data was returned.
    // The "non-blocking" function checks if there is any data in the receive
    // FIFO and does not "hang" if there isn't.
    //
    while(SSIDataGetNonBlocking(SSI0_BASE, &ulDataRx))
    {
    }

    //
    // Initialize the data to send.
    //

#else

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF) ;
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE) ;

    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI1) ;
    GPIOPinConfigure() ;
    GPIOPinTypeSSI() ;

#endif

    //IntMasterEnable();
    IntDisable(INT_GPIOB);
    HWREG(NVIC_BASE + EN0)= 0x00;
    CAN_Reset();
    CAN_Init();
    ulDataRx=Reg_Read(MCP_CANINTF);
    while(GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_6)==0x00);
    GPIOPinIntEnable(INT_GPIOB,0x40);
    IntEnable(INT_GPIOB);
    HWREG(0xE000E000 + 0x280)=0xFF;
    HWREG(GPIO_PORTB_BASE + GPIOIM)=0x40;
    HWREG(NVIC_BASE + EN0)= 0x02;
    GPIOIntTypeSet(GPIO_PORTB_BASE,0x40,GPIO_LOW_LEVEL);
    while(1);
}

void SPI_Send(unsigned long x[], int y)
{
	int i;
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, 0x00);
	for(i=0;i<y;i++)
	{
	   while(SSIBusy(SSI0_BASE));
	   SSIDataPut(SSI0_BASE, x[i]);
	   while(SSIBusy(SSI0_BASE));
	}
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, 0x80);
}

unsigned long SPI_Receive(int x)
{
	uint32_t Rxdata=0;
	for(;x>0;x--)
	{
		SSIDataGet(SSI0_BASE, &Rxdata);
	}
	return Rxdata;
}

unsigned long Reg_Read(unsigned long address)
{
	unsigned long Tx[3];
	unsigned long result;
	while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
		{
			SPI_Receive(1);
		}
	Tx[0]=0x03;
	Tx[1]=address;
	Tx[2]=0;
	SPI_Send(Tx,3);
	while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
	{
		result=SPI_Receive(1);
	}
	return result;
}

void Reg_Write(unsigned long address,unsigned long data)
{
	    unsigned long Tx[3];
		while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
			{
				SPI_Receive(1);
			}
		Tx[0]=0x02;
		Tx[1]=address;
		Tx[2]=data;
		SPI_Send(Tx,3);
		while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
		{
			SPI_Receive(1);
		}
}

void CAN_Reset(void)
{
	unsigned long data[1];
	data[0]=0xC0;
	SPI_Send(data,1);
	SysCtlDelay(1000);
}

void Reg_BitModify(unsigned long address,unsigned long mask, unsigned long data)
{
	unsigned long Tx[4];
	while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
		{
			SPI_Receive(1);
		}
	Tx[0]=0x05;
	Tx[1]=address;
	Tx[2]=mask;
	Tx[3]=data;
	SPI_Send(Tx,4);
	while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
	{
		SPI_Receive(1);
	}
}

void CAN_Init(void)
{
	    //CAN_Reset();
	    Reg_BitModify(MCP_CANCTRL,0xE0, 0x80);
	    ulDataRx= Reg_Read(MCP_CANSTAT);
	    while((ulDataRx & 0xE0) !=0x80)
	    {
	    	CAN_Reset();
	    	Reg_BitModify(MCP_CANCTRL,0xE0, 0x80);
	    	ulDataRx=Reg_Read(MCP_CANSTAT);
	    }
	    Reg_Write(MCP_CNF1,0x07);
	    Reg_Write(MCP_CNF2,0x92);
	    Reg_Write(MCP_CNF3,0x82);
	    Reg_Write(MCP_RXB0CTRL,0x20);
	    Reg_Write(MCP_RXB1CTRL,0x20);
	    Reg_Write(MCP_BFPCTRL,0x0F);
	    Reg_Write(MCP_RXF0SIDH,0xAA);
	    Reg_Write(MCP_RXF0SIDL,0x40);
	    Reg_Write(MCP_RXF0EID8,0x00);
	    Reg_Write(MCP_RXF0EID0,0x00);
	    Reg_Write(MCP_RXM0SIDH,0x00);
	    Reg_Write(MCP_RXM0SIDL,0x00);
	    Reg_Write(MCP_RXM0EID8,0x00);
	    Reg_Write(MCP_RXM0EID0,0x00);

	    Reg_Write(MCP_RXF1SIDH,0x00);
	    Reg_Write(MCP_RXF1SIDL,0x00);
	    Reg_Write(MCP_RXF1EID8,0x00);
	    Reg_Write(MCP_RXF1EID0,0x00);
	    Reg_Write(MCP_RXM1SIDH,0xFF);
	    Reg_Write(MCP_RXM1SIDL,0x00);
	    Reg_Write(MCP_RXM1EID8,0x00);
	    Reg_Write(MCP_RXM1EID0,0x00);

	    Reg_Write(MCP_RXF2SIDH,0x00);
	    Reg_Write(MCP_RXF2SIDL,0x00);
	    Reg_Write(MCP_RXF2EID8,0x00);
	    Reg_Write(MCP_RXF2EID0,0x00);

	    Reg_Write(MCP_RXF3SIDH,0x00);
	    Reg_Write(MCP_RXF3SIDL,0x00);
	    Reg_Write(MCP_RXF3EID8,0x00);
	    Reg_Write(MCP_RXF3EID0,0x00);
	    Reg_Write(MCP_CANINTE,0x01);

	    Reg_BitModify(MCP_CANCTRL,0xE0, 0x00);
	    ulDataRx= Reg_Read(MCP_CANSTAT);
	    while((ulDataRx & 0xE0) !=0x00)
	     {
	    	   CAN_Reset();
	    	   Reg_BitModify(MCP_CANCTRL,0xE0, 0x00);
	    	   ulDataRx=Reg_Read(MCP_CANSTAT);
	     }

}

void Transmit_Data(unsigned long number)
{
	unsigned long Tx[1];
	Tx[0]=0x80|number;
	SPI_Send(Tx,1);
}

void CAN_Interrupt(void)
{
	unsigned long status;
	status= Reg_Read(MCP_CANSTAT);
	status &=0x0E;
	switch(status)
	{
	case 0x00:
		break;
	case 0x02:
		break;
	case 0x04:
		break;
	case 0x06:
		break;
	case 0x08:
		break;
	case 0x0A:
		break;
	case 0x0C:
		//Reg_BitModify(MCP_CANINTF,0x01, 0x00);
		 Read_RX(0,DataRx_BUFFER);
		break;
	case 0x0E:
		break;
	}

}

void Read_RX(int number, unsigned long RX[])
{
	    unsigned long Tx[14]={0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		while(HWREG(SSI0_BASE + SSI_O_SR) & SSI_SR_RNE)
			{
				SPI_Receive(1);
			}
		Tx[0]=0x90+2*number;
		int i;
		GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, 0x00);
		for(i=0;i<14;i++)
			{
			   while(SSIBusy(SSI0_BASE));
			   SSIDataPut(SSI0_BASE, Tx[i]);
			   while(SSIBusy(SSI0_BASE));
			   *(RX++)=SPI_Receive(1);
			}
		GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_7, 0x80);
}
